package main

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"time"

	"transfer/app/controller"
	"transfer/app/router"
	"transfer/pkg/config"
	"transfer/pkg/logger"

	"github.com/gin-gonic/gin"

	_ "transfer/docs" // docs is generated by Swag CLI
)

func main() {
	// 初始化配置
	config.Init()

	// 初始化日志
	logger.Init()

	// 设置 Gin 模式
	gin.SetMode(config.GlobalConfig.Server.Mode)

	// 初始化控制器
	mediaTransferController, err := controller.NewMediaTransferController(&config.GlobalConfig)
	if err != nil {
		logger.Fatalf("Failed to initialize controller: %v", err)
	}

	// 初始化路由
	r, err := router.SetupRouter(&config.GlobalConfig, mediaTransferController)
	if err != nil {
		logger.Fatalf("Failed to setup router: %v", err)
	}

	// 创建 HTTP 服务器
	server := &http.Server{
		Addr:    fmt.Sprintf(":%d", config.GlobalConfig.Server.Port),
		Handler: r,
	}

	// 在 goroutine 中启动服务器
	go func() {
		logger.Infof("HTTPServer listen: %s", server.Addr)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Fatalf("HTTPServer ListenAndServe: %s", err)
		}
	}()

	// 等待中断信号以优雅地关闭服务器（设置 30 秒的超时时间）
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)
	<-quit
	logger.Info("Shutdown HTTPServer ...")

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	if err := server.Shutdown(ctx); err != nil {
		logger.Fatalf("HTTPServer Shutdown: %s", err)
	}
	logger.Info("HTTPServer exited")
}
